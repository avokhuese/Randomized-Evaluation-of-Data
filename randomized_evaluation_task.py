# -*- coding: utf-8 -*-
"""Randomized evaluation Task

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17TesDvifyJEbQrP6o7MWsCxxIdKL2L90
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from datetime import timedelta

"""# Part 1 - Data cleaning and quality check

We are currently running a randomized evaluation in Sierra Leone, and are sending the data from a survey collected daily to you. Your responsibility is to implement data cleaning and quality checks.

## Question 1

You have obtained a data set called Test_dataset_round1.csv, which is the main data set of the project. Additionally, a new round of data collection took place with new respondents so there is a separate data set called Test_dataset_round2.csv. Combine these two datasets.
"""

parse_dates = ['vaccinegc_date_1', 'vaccinegc_date_2', 'vaccinegc_date_3', 'vaccinegc_date_4', 'vaccinegc_date_5', 'dob', 'surveydate']
df1 = pd.read_csv('Test_dataset_round1.csv', parse_dates=parse_dates)
df2 = pd.read_csv('Test_dataset_round2.csv', parse_dates=parse_dates)

df = pd.concat([df1, df2], axis=0)

df

df.dtypes

"""## Question 2

Now that we have a complete and up to date data set, you should check the quality of the data. This will inform our cleaning work and indicate whether there have been problems with the administration of our survey.

### Question 2.a

Calculate the average and median interview time. Does this average value mask important differences across surveyors?
"""

df['interview_duration'] = df['end_interview'] - df['start_interview']

df[['start_interview', 'end_interview', 'interview_duration']].describe()

df[['start_interview', 'end_interview', 'interview_duration']].median()

"""### Question 2.b

The data set includes each child’s date of birth and vaccination dates. Do you see any inconsistent entries across these variables? What are the most recurrent problems?

The vaccines should have been taken after the birth date.
"""

def check_vaccine_agains_dob(vaccine_id):
    vaccine_after_dob = 'vaccine_{}_after_dob'.format(vaccine_id)
    vaccine_id = 'vaccinegc_date_{}'.format(vaccine_id)
    df[vaccine_after_dob] = df[vaccine_id].isna() | (df[vaccine_id] >= df['dob'])
    vaccine_after_dob_query = df[vaccine_after_dob]

    invalid_vaccine_dates = df[vaccine_after_dob_query == False][['dob', vaccine_id]]
    print('Out of {} entries, {} entries had a {} before than the DOB'.format(len(df), len(invalid_vaccine_dates), vaccine_id))
    print(invalid_vaccine_dates.head())
    print('----------------')
    print()
    return vaccine_after_dob


check_vaccine_against_dob_labels = [check_vaccine_agains_dob(i) for i in range(1, 6)]

"""And each vaccine date should be after the previous"""

def check_vaccine_with_next(vid):
    vaccine_id = 'vaccinegc_date_{}'.format(vid)
    next_vaccine_id = 'vaccinegc_date_{}'.format(vid + 1)

    # If vaccine (vid+1) was provided, then vaccine (vid) should be provided
    vaccine_before_valid = df[next_vaccine_id].isna() | df[vaccine_id].notna()

    # If vaccine (vid) was provided and vaccine (vid+1) was provided, then vaccine (vid) should be before vaccine (vid+1)
    vaccine_after_valid = ~(df[next_vaccine_id].notna() & df[vaccine_id].notna()) | (df[vaccine_id] <= df[next_vaccine_id])

    before_valid_label = 'vaccine_before_valid_{}'.format(vid)
    after_valid_label = 'vaccine_after_valid_{}'.format(vid)
    df['vaccine_before_valid_{}'.format(vid)] = vaccine_before_valid
    df['vaccine_after_valid_{}'.format(vid)] = vaccine_after_valid

    cols = [vaccine_id, next_vaccine_id]
    vaccine_before_invalid_df = df[vaccine_before_valid == False][cols]
    vaccine_after_invalid_df = df[vaccine_after_valid == False][cols]
    print('Out of {} entries, {} entries had a "{}" but not a "{}"'.format(len(df), len(vaccine_before_invalid_df), next_vaccine_id, vaccine_id))
    print(vaccine_before_invalid_df.head())

    print('Out of {} entries, {} entries had a \"{}\" before than the next vaccine'.format(len(df), len(vaccine_before_invalid_df), vaccine_id))
    print(vaccine_after_invalid_df.head())
    print('----')
    print()

    return [before_valid_label, after_valid_label]

check_vaccine_with_next_labels = [l for i in range(1, 5) for l in check_vaccine_with_next(i)]

"""## Question 3


A key component of data cleaning is removing personally identifiable information (PII). When working with this dataset, we wouldn’t want surveyor names to be known. Create a numerical variable where each surveyor corresponds to a number.
"""

enumerator = df['enumerator']
enumerator_categorized = enumerator.astype('category')
df['enumerator_id'] = df['enumerator'].factorize()[0]

df = df.drop('enumerator', axis=1)
df['enumerator_id'].head()

"""## Question 4

Is the caregiver_id variable unique (i.e. different value for each observation) in the dataset? If it isn’t, list out these duplicated IDs. What steps would you recommend taking to resolve an issue of duplicate IDs?
"""

dups = df.duplicated(subset=['caregiver_id'], keep=False) == True
print('Found {} duplicate ids'.format(len(df[dups])))
df[dups][['caregiver_id']]

df = df[~dups]

entries_before = len(df)
for l in check_vaccine_against_dob_labels + check_vaccine_with_next_labels:
    df = df[df[l]]

df = df.drop(check_vaccine_against_dob_labels + check_vaccine_with_next_labels, axis=1)

print('After cleaning the data from the dates, we have {} entries. Before {} entries'.format(len(df), entries_before))

"""# Part 2

The objective of the randomized evaluation is to test the impact of health worker training on immunization completion for children under one year of age. Half of the clinics were assigned to the training program, and half were assigned to control, as indicated by the variable condition. We define complete immunization in a simplified way here using the last vaccine received by age 1, indicated by the variable last_vaccine. Measles 1 is the last vaccine in the under-one schedule
"""

for i in range(1, 6):
    df['has_vaccine_{}'.format(i)] = df['vaccinegc_date_{}'.format(i)].notna()

df['has_all_vaccines'] = df['has_vaccine_1'] & df['has_vaccine_2'] & df['has_vaccine_3'] & df['has_vaccine_4'] & df['has_vaccine_5']

measles_1 = 'Measles 1'
one_year_old = df[((df['surveydate'] - df['dob']) < timedelta(days=365)) & (df['last_vaccine'] == measles_1)]

has_vaccines_condition_group_by = one_year_old.groupby(['has_all_vaccines', 'condition']).size()
has_vaccines_condition_group_by

values_to_plot = np.array([has_vaccines_condition_group_by.get(True).values, has_vaccines_condition_group_by.get(False).values])

fig, ax = plt.subplots(figsize=(8, 7))

size = 0.3
vals = values_to_plot

cmap = plt.colormaps["tab20c"]
outer_colors = cmap(np.arange(2)*8)
inner_colors = cmap([1, 3, 9, 11])

def absolute_value(val):
    a  = np.round(val/100.*values_to_plot.sum(), 0)
    return a

ax.pie(vals.sum(axis=1), radius=1, colors=outer_colors, autopct='%1.2f%%', pctdistance=0.85,
       wedgeprops=dict(width=size, edgecolor='w'), labels=['Has all vaccines', 'Does not have all vaccines'])

ax.pie(vals.flatten(), radius=1-size, colors=inner_colors, autopct='%1.2f%%', pctdistance=0.75,
       wedgeprops=dict(width=size, edgecolor='w'), labels=['Control (has all vaccines)', 'Treatment (has all vaccines)', 'Control (does not have all vaccines)', 'Treatment (does not have all vaccines)'], labeldistance=None)

ax.set(aspect="equal", title='Number of completed immunizations for one-year old children')


plt.legend(loc=(-0.2, -0.1))
plt.show()

"""## Question 5

Does the data suggest that random assignment across treatment and control clinics was successfully conducted? Please provide a rationale for your conclusion and demonstrate analysis of data in your answer.

### Answer

In the pie chart, we can see that the percentages on both sections (has all vs doesn't have all vaccines) for the two conditions ("Treatment", "Control") are fairly similar. Which indicates us that the random assignment was successful.

## Question 6

Was the program successful? What factors other than the treatment assignment might influence the effect of the program? Do results differ when you take those into account?

### Answer

If we look at the pie chart, we can see that on the samples of one-year old children that were vaccinated with Measles 1, 60.65% have all vaccines, while 39.36% don't have all vaccines. This ration of vaccinated vs non-vaccinated holds inside each of the assignments (control vs treatment).
"""